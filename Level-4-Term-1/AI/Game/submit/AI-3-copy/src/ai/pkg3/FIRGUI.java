/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ai.pkg3;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Insets;
import javafx.util.Pair;
import javax.swing.JPanel;
import javax.swing.border.Border;

/**
 *
 * @author Bishwajit saha
 */
public class FIRGUI extends javax.swing.JFrame {

    /**
     * Creates new form FIRGUI
     */
    int[][] board;
    Coordinate topLeft;
    int size;   //the dimension of each cell
    boolean humanTurn;
    Pair clickedCell;   //contains the row and column number of the clicked cell
    
    public FIRGUI() {
        board=new int[8][8];
        topLeft=new Coordinate(30,30);
        size=50;
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
               if ( row % 2 == col % 2 ) {
                  if (row < 3)
                     board[row][col] = 1;
                  else if (row > 4)
                     board[row][col] = -1;
                  else
                     board[row][col] = 0;
               }
               else {
                  board[row][col] = 0;
               }
            }
         }
        initComponents();
        
    }
    
    public FIRGUI(int[][] board) {
        this.board=board;
        topLeft=new Coordinate(30,30);
        size=50;
       
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new BoardPanel(this);
        turnLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel.setBackground(new java.awt.Color(254, 250, 247));
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClicked(evt);
            }
        });

        turnLabel.setText("Your Turn");

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(turnLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(418, 418, 418))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addGap(0, 424, Short.MAX_VALUE)
                .addComponent(turnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void setLabelText(String msg)    {
        this.turnLabel.setText(msg);
    }
    public void setBoard(int[][] b) {
        this.board=b;
        this.repaint();
    }
    
    
    
    
    private void panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClicked
        // TODO add your handling code here:
        int x=evt.getX();
        int y = evt.getY();
        int xx=x-topLeft.x;
        int yy=y-topLeft.y;
        x-=topLeft.x;
        y-=topLeft.y;
        x/=size+10;
        y/=size+10;
//        System.out.println("mouse pressed... "+x+" "+y+" evt: "+xx+" "+yy);
        if(humanTurn)   {
            clickedCell = new Pair<>(y,x);
            humanTurn=false;
        }
        panel.repaint();
        this.repaint();
    }//GEN-LAST:event_panelMouseClicked
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel panel;
    private javax.swing.JLabel turnLabel;
    // End of variables declaration//GEN-END:variables
}

class Coordinate 
{
    int x,y;
    Coordinate()    {x=0;y=0;}
    Coordinate(int x,int y){this.x=x;this.y=y;}
}

class BoardPanel extends JPanel
{
    FIRGUI fg;
    public BoardPanel(FIRGUI fg) {
        super();
        this.fg=fg;
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
        
        this.setSize(700,800);
        Coordinate topLeft=fg.topLeft;
        
        int[][] board=fg.board;
        
        int height = board.length;
        int width = board[0].length;
//        System.out.println("h: "+height+" w: "+width);
        int size=fg.size;
        
        for(int r=0,j=topLeft.y; r<=height; j+=size+10,r++) {
            //g.setColor(Color.BLACK);
            //g.fillR
             //g.fillRect(2 + *20, 2 + row*20, 20, 20);
            g.fillRoundRect(topLeft.x, j, width*(10+size), 5, 2, 2);
//            System.out.println("iii: "+j);
            for(int c=0,i=topLeft.x; c<=width; c++,i+=size+10)  {
                
                if(r>=height || c>=width)   continue;
                if (r % 2 == c % 2) {
                    g.setColor(Color.BLACK);
                } else {
                    g.setColor(Color.GRAY);
                }
                g.fillRect(i + 5, j + 5, size, size);

                if(board[r][c]==1)  {
                    g.setColor(new Color(255,42,42));
                    g.fillOval(i+5, j+5, size,size);
//                    System.out.println("drawing circle in "+i+" "+j);
                }
                else if(board[r][c]==2)  {
                    g.setColor(new Color(255,42,42));
                    g.fillOval(i+5, j+5, size,size);
                    g.setColor(Color.WHITE);
                    g.drawString("K", 21 + i+5, 30 + j+5);
                  
//                    System.out.println("drawing circle in "+i+" "+j);
                }
                else if(board[r][c]==-1)    {
                    g.setColor(new Color(218,255,32));
                    g.fillOval(i+5, j+5, size,size);
                }
                else if(board[r][c]==-2)    {
                    g.setColor(new Color(218,255,32));
                    g.fillOval(i+5, j+5, size,size);
                    g.setColor(Color.BLACK);
                    g.drawString("K", 21 + i+5, 30 + j+5);
                }
            }
        }
//        for(int r=0;r<height;r++){
//            for(int c=0;c<width;c++)    System.out.print(board[r][c]+" ");
//            System.out.println("");
//        }
//        int R=board.length;
        
//        int k = height/N;
//        for ( int i = 0; i < N; i++ )    {
//            for ( int j = 0; j < N; j++ ) {
//                g.setColor(color[board[i][j]-1]);
//                g.fillRect(j*k, i*k, k, k);
//            }
//        }
    }
   
}